---
description: Enforce consistent use of utility modules (DO/DON'T map)
alwaysApply: true
---
# Principle
- **Never** re-implement functionality that exists in `src/utils/*`. Import and use it.
- If you need new cross-cutting functionality, **add it to utils first** with tests, then call it.


- Use these modules:
  - `src.utils.compute` → LPIPS normalization, tiling (hann, tile_slices, apply_tiled), bounds projection, mm↔px.
  - `src.utils.color` → sRGB↔linear, RGB↔Lab, ΔE2000, luminance.
  - `src.utils.geometry` → cubic Bézier evaluation/flattening, polyline length/bbox, clipping.
  - `src.utils.io` → atomic writes, YAML load/save, symlink helpers, epoch discovery.
  - `src.utils.torch_utils` → seeding, channels-last, device/dtype helpers, AMP context, GPU mem HWM.
  - `src.utils.metrics` → PSNR, SSIM, coverage, edge-preservation.
  - `src.utils.strokes` → stroke ID, vec↔YAML round-trip, stroke bbox/heatmap.
  - `src.utils.logging_config` → uniform logging to console/file/JSON with context.
  - `src.utils.hash` → sha256_file/tensor for MLflow provenance.
- **DON'T** hand-roll:
  - LPIPS normalization, tiling, mm↔px math, ΔE2000, atomic writes, or Bézier flattening—**import from utils**.
- **Logging**: never use `print()`. Always call `logging_config.setup_logging(...)` and then `logging.getLogger(__name__)`.
- **Raise explicit exceptions** with actionable messages; avoid silent clamps except in `compute.project_to_bounds`.
- **Docstrings** must state shapes, dtypes, ranges. Images are **linear RGB in [0,1]** unless otherwise noted.


# When adding a new helper
1) Implement under `src/utils/` with docstrings (NumPy style) and unit tests in `tests/`.
2) Call sites must import the new helper rather than duplicating logic.
3) Update any relevant rules or docs if behavior affects invariants.


# Prohibitions
- No ad-hoc mm↔px math in callers. Use `compute.mm_to_px/px_to_mm`.
- No ad-hoc LPIPS prep. Use `compute.normalize_img_for_lpips` and compute LPIPS in **FP32** only.
- No raw file writes for GUI-visible artifacts. Use `io.atomic_*` and `io.symlink_atomic`.
- Do not import nvdiffrast/low-level rasterizers outside the renderer module.