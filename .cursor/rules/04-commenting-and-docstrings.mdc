---
description: Commenting & Docstrings Standard (NumPy style, shapes/dtypes/ranges/units required)
alwaysApply: true
---
# Scope
These rules apply to **all** Python modules in `src/` and tests in `tests/`.

# Style
- Use **NumPy-style docstrings** (Napoleon). Triple double-quotes `"""`.

Use inline # comments for simple functions; 
use NumPy-style docstrings ("""...""") for complex functions.
Mandatory type hints in signatures are the primary documentation for simple functions.When using docstrings, document shapes, dtypes, ranges, and units (esp. tensors & mm geometry).
English, full sentences, $\leq$100 cols. 
Wrap long parameter descriptions.

# Coverage
- **Required** docstrings:
  - Every **module** (top-of-file).
  - Every **public** class, function, and method.
  - Private helpers (`_foo`) need a short summary or clear inline comments.
Module docstrings ("""...""") are required (top-of-file).
Complex functions/classes require a full NumPy-style docstring ("""...""").
A function is "complex" if it requires documenting any of the items listed in the "What to document" section below.
Simple functions/classes only require a one-line # comment explaining their purpose.A function is "simple" if its behavior is obvious from its name and type hints, and it has none of the complex items to document.Prohibited: commented-out code. If code is obsolete, delete it.

What to document
Parameters: name, meaning, shape/dtype/range, units where applicable.
Returns: same (shape/dtype/range/units). Use precise semantics.
Raises: enumerate exceptions for invalid inputs, OOM, etc.
Precision & numerics: when using AMP/BF16/FP32, state the exact behavior.Coordinate frames: state frame (image vs. machine), mention mm↔px if any conversion occurs.
Performance: if algorithmic complexity or tiling strategy matters, add a Notes block.References: link to papers/repos/specs when implementing known algorithms.Inline comments (the “why”)Explain why the code exists or constraints it satisfies, not what the next line does.
Call out invariants, magic constants (and their origin), edge-case handling.
Keep comments adjacent to the logic they explain.



- **Prohibited**: commented-out code. If code is obsolete, delete it.

# What to document
- **Parameters**: name, meaning, *shape/dtype/range*, **units** where applicable.
- **Returns**: same (shape/dtype/range/units). Use precise semantics.
- **Raises**: enumerate exceptions for invalid inputs, OOM, etc.
- **Precision & numerics**: when using AMP/BF16/FP32, state the exact behavior.
- **Coordinate frames**: state frame (image vs. machine), mention mm↔px if any conversion occurs.
- **Performance**: if algorithmic complexity or tiling strategy matters, add a **Notes** block.
- **References**: link to papers/repos/specs when implementing known algorithms.

# Inline comments (the “why”)
- Explain **why** the code exists or constraints it satisfies, not what the next line does.
- Call out invariants, magic constants (and their origin), edge-case handling.
- Keep comments **adjacent** to the logic they explain.

# Tags (canonical set, uppercase)
- `# TODO(<owner>, <YYYY-MM-DD>):` short imperative; link to issue (e.g., GH-123).
- `# FIXME:` correctness bug that must be fixed soon.
- `# HACK:` intentional workaround; document risk and exit criteria.
- `# NOTE:` important non-obvious context; invariants, contracts, or caveats.
- `# PERF:` performance-related rationale or follow-up.

# Precision & ranges (project invariants)
- Images inside the system are **linear RGB in [0,1]** unless explicitly stated.
- LPIPS inputs must be **[-1,1]** and computed in **FP32** only.
- Geometry parameters are **millimeters**. Conversions use `src.utils.compute` helpers.
- If a function deviates from these, **state it explicitly** in its docstring.

# YAML comments
- At the top of each config: purpose, owning module, and units.
- For numeric fields, annotate **units** and **valid ranges** in-line.

# Examples & doctests
- Include **minimal runnable examples** where helpful (doctest `>>>` style).
- Keep examples tiny; use synthetic data.

# Lint expectations
- Docstrings should satisfy `pydocstyle`/`ruff` (D100+, Numpy conventions).
- No trailing whitespace; lines ≤100 cols.